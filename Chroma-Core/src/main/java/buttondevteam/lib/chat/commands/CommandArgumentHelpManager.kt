package buttondevteam.lib.chat.commands

import buttondevteam.core.MainPlugin
import buttondevteam.lib.ChromaUtils
import buttondevteam.lib.TBMCCoreAPI
import buttondevteam.lib.chat.Command2Sender
import buttondevteam.lib.chat.ICommand2
import org.bukkit.configuration.ConfigurationSection
import org.bukkit.configuration.file.YamlConfiguration
import java.io.IOException
import java.io.InputStreamReader
import java.lang.reflect.Method

/**
 * Deals with reading the commands.yml file from the plugin. The file is generated by ButtonProcessor at compile-time.
 * Only used when registering commands.
 *
 * @param command The command object to use
 */
class CommandArgumentHelpManager<TC : ICommand2<TP>, TP : Command2Sender>(command: TC) {
    private var commandConfig: ConfigurationSection? = null

    /**
     * Read the yaml file for the given command class.
     */
    init {
        val commandClass = command.javaClass
        // It will load it for each class, but it would be complicated to solve that
        // Most plugins don't have a lot of command classes anyway
        try {
            commandClass.getResourceAsStream("/commands.yml").use { str ->
                if (str == null) {
                    if (!ChromaUtils.isTest) {
                        ChromaUtils.logWarn("Failed to get command data for $commandClass! No commands.yml file found.")
                    }
                    return@use
                }
                val config = YamlConfiguration.loadConfiguration(InputStreamReader(str))
                commandConfig = config.getConfigurationSection(commandClass.canonicalName.replace('$', '.'))
                if (commandConfig == null) {
                    MainPlugin.instance.logger.warning("Failed to get command data for $commandClass! Make sure to use 'clean install' when building the project.")
                }
            }
        } catch (e: IOException) {
            TBMCCoreAPI.SendException("Error while getting command data!", e, MainPlugin.instance)
        }
    }

    /**
     * Returns a parameter help string for the given subcommand method by reading it from the plugin.
     *
     * @param method The subcommand method
     * @return The parameter part of the usage string for the command
     */
    fun getParameterHelpForMethod(method: Method): String? {
        val cs = commandConfig?.getConfigurationSection(method.name)
        if (cs == null) {
            if (!ChromaUtils.isTest) {
                MainPlugin.instance.logger.warning("Failed to get command data for $method! Make sure to use 'clean install' when building the project.")
            }
            return null
        }

        fun fail(message: String): String? {
            TBMCCoreAPI.SendException(
                "Error while getting command data for $method!",
                Exception(message),
                MainPlugin.instance
            )
            return null
        }

        val mname = cs.getString("method") ?: return fail("Method is null")
        val params = cs.getString("params") ?: return fail("Params is null")
        //Check only the name - the whole method is still stored for backwards compatibility and in case it may be useful
        val i = mname.indexOf('(')
        if (i != -1 && method.name == mname.substring(0, i)) {
            return params
        } else fail("Method '$method' != $mname")
        return null
    }
}