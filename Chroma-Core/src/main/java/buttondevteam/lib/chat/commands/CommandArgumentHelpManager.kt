package buttondevteam.lib.chat.commands;

import buttondevteam.core.MainPlugin;
import buttondevteam.lib.TBMCCoreAPI;
import buttondevteam.lib.chat.Command2Sender;
import buttondevteam.lib.chat.ICommand2;
import lombok.val;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.YamlConfiguration;

import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Method;

/**
 * Deals with reading the commands.yml file from the plugin. The file is generated by ButtonProcessor at compile-time.
 * Only used when registering commands.
 */
public class CommandArgumentHelpManager<TC extends ICommand2<TP>, TP extends Command2Sender> {
	private ConfigurationSection commandConfig;

	/**
	 * Read the yaml file for the given command class.
	 *
	 * @param command The command object to use
	 */
	public CommandArgumentHelpManager(TC command) {
		val commandClass = command.getClass();
		// It will load it for each class, but it would be complicated to solve that
		// Most plugins don't have a lot of command classes anyway
		try (val str = commandClass.getResourceAsStream("/commands.yml")) {
			if (str == null) {
				TBMCCoreAPI.SendException("Error while getting command data!", new Exception("Resource not found!"), MainPlugin.Instance);
				return;
			}
			val config = YamlConfiguration.loadConfiguration(new InputStreamReader(str));
			commandConfig = config.getConfigurationSection(commandClass.getCanonicalName().replace('$', '.'));
			if (commandConfig == null) {
				MainPlugin.Instance.getLogger().warning("Failed to get command data for " + commandClass + "! Make sure to use 'clean install' when building the project.");
			}
		} catch (IOException e) {
			TBMCCoreAPI.SendException("Error while getting command data!", e, MainPlugin.Instance);
		}
	}

	/**
	 * Returns a parameter help string for the given subcommand method by reading it from the plugin.
	 *
	 * @param method The subcommand method
	 * @return The parameter part of the usage string for the command
	 */
	public String getParameterHelpForMethod(Method method) {
		val cs = commandConfig.getConfigurationSection(method.getName());
		if (cs == null) {
			MainPlugin.Instance.getLogger().warning("Failed to get command data for " + method + "! Make sure to use 'clean install' when building the project.");
			return null;
		}
		val mname = cs.getString("method");
		val params = cs.getString("params");
		int i = mname.indexOf('('); //Check only the name - the whole method is still stored for backwards compatibility and in case it may be useful
		if (i != -1 && method.getName().equals(mname.substring(0, i)) && params != null) {
			return params;
		} else
			TBMCCoreAPI.SendException("Error while getting command data for " + method + "!", new Exception("Method '" + method + "' != " + mname + " or params is " + params), MainPlugin.Instance);
		return null;
	}
}
